/* Generated by Together */

package org.ibit.rol.sac.model;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;

public class Traducible implements ValueObject {

	private static final long serialVersionUID = 1L;
	
	private Map<String,Traduccion> traducciones = new HashMap<String,Traduccion>();

    protected Map<String,Traduccion> getTraducciones() {
        return traducciones;
    }

    protected void setTraducciones(Map<String,Traduccion> traducciones) {
        this.traducciones = traducciones;
    }

    // Métodos publicos.

    /**
     * Conjunto de idiomas para los que hay traducción.
     * @return códigos de idioma para los que hay traducción.
     */
    public Set<String> getLangs() {
        return this.traducciones.keySet();
    }


    /**
     * Obtiene la traduccion por defecto.
     * @return La traduccion en el idioma per defecto.
     */
    public Traduccion getTraduccion() {
        return (Traduccion) traducciones.get(System.getProperty("es.caib.rolsac.idiomaDefault"));
    }

    /**
     * Obtiene la traduccion en un idioma determinado o <code>null</code>.
     * @param idioma Idioma de la traducción.
     * @return Traduccion en el idioma indicado o <code>null</code> si no existe.
     */
    public Traduccion getTraduccion(String idioma) {
        return (Traduccion) traducciones.get(idioma);
    }
    
    /**
     * Obtiene la traduccion en un idioma determinado o <code>null</code>.
     * @param idioma Idioma de la traducción.
     * @return Traduccion en el idioma indicado o <code>null</code> si no existe.
     */
    public Traduccion getTraduccionFront(String idioma) {
        return (Traduccion) traducciones.get(idioma);
    }

    /**
     * Fija una traducción en un idioma determinado, o la borra si es <code>null</code>.
     * @param idioma Idioma de la traducción,
     * @param traduccion La traducción a fijar.
     */
    public void setTraduccion(String idioma, Traduccion traduccion) {
        if (traduccion == null) {
            traducciones.remove(idioma);
        } else {
            traducciones.put(idioma, traduccion);
        }
    }

    public Map<String,Traduccion> getTraduccionMap() {
        return traducciones;
    }

    public void setTraduccionMap(Map<String,Traduccion> traduccionMap) {
        this.traducciones = new HashMap<String,Traduccion>(traduccionMap);
    }

}
